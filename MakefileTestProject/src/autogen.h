/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __AUTOGEN_H__
#define __AUTOGEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for bjs.v1.Animal1 */

#define NS_TYPE_BJS_V1_ANIMAL1 (ns_bjs_v1_animal1_get_type ())
#define NS_BJS_V1_ANIMAL1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NS_TYPE_BJS_V1_ANIMAL1, nsBjsV1Animal1))
#define NS_IS_BJS_V1_ANIMAL1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NS_TYPE_BJS_V1_ANIMAL1))
#define NS_BJS_V1_ANIMAL1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), NS_TYPE_BJS_V1_ANIMAL1, nsBjsV1Animal1Iface))

struct _nsBjsV1Animal1;
typedef struct _nsBjsV1Animal1 nsBjsV1Animal1;
typedef struct _nsBjsV1Animal1Iface nsBjsV1Animal1Iface;

struct _nsBjsV1Animal1Iface
{
  GTypeInterface parent_iface;

  void (*jumped) (
    nsBjsV1Animal1 *object,
    gdouble arg_height);

  void (*my_sig) (
    nsBjsV1Animal1 *object,
    guint arg_id,
    guint arg_number,
    GVariant *arg_map);

};

GType ns_bjs_v1_animal1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ns_bjs_v1_animal1_interface_info (void);
guint ns_bjs_v1_animal1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void ns_bjs_v1_animal1_emit_jumped (
    nsBjsV1Animal1 *object,
    gdouble arg_height);

void ns_bjs_v1_animal1_emit_my_sig (
    nsBjsV1Animal1 *object,
    guint arg_id,
    guint arg_number,
    GVariant *arg_map);



/* ---- */

#define NS_TYPE_BJS_V1_ANIMAL1_PROXY (ns_bjs_v1_animal1_proxy_get_type ())
#define NS_BJS_V1_ANIMAL1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NS_TYPE_BJS_V1_ANIMAL1_PROXY, nsBjsV1Animal1Proxy))
#define NS_BJS_V1_ANIMAL1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NS_TYPE_BJS_V1_ANIMAL1_PROXY, nsBjsV1Animal1ProxyClass))
#define NS_BJS_V1_ANIMAL1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NS_TYPE_BJS_V1_ANIMAL1_PROXY, nsBjsV1Animal1ProxyClass))
#define NS_IS_BJS_V1_ANIMAL1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NS_TYPE_BJS_V1_ANIMAL1_PROXY))
#define NS_IS_BJS_V1_ANIMAL1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NS_TYPE_BJS_V1_ANIMAL1_PROXY))

typedef struct _nsBjsV1Animal1Proxy nsBjsV1Animal1Proxy;
typedef struct _nsBjsV1Animal1ProxyClass nsBjsV1Animal1ProxyClass;
typedef struct _nsBjsV1Animal1ProxyPrivate nsBjsV1Animal1ProxyPrivate;

struct _nsBjsV1Animal1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  nsBjsV1Animal1ProxyPrivate *priv;
};

struct _nsBjsV1Animal1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType ns_bjs_v1_animal1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (nsBjsV1Animal1Proxy, g_object_unref)
#endif

void ns_bjs_v1_animal1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
nsBjsV1Animal1 *ns_bjs_v1_animal1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
nsBjsV1Animal1 *ns_bjs_v1_animal1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ns_bjs_v1_animal1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
nsBjsV1Animal1 *ns_bjs_v1_animal1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
nsBjsV1Animal1 *ns_bjs_v1_animal1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define NS_TYPE_BJS_V1_ANIMAL1_SKELETON (ns_bjs_v1_animal1_skeleton_get_type ())
#define NS_BJS_V1_ANIMAL1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), NS_TYPE_BJS_V1_ANIMAL1_SKELETON, nsBjsV1Animal1Skeleton))
#define NS_BJS_V1_ANIMAL1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), NS_TYPE_BJS_V1_ANIMAL1_SKELETON, nsBjsV1Animal1SkeletonClass))
#define NS_BJS_V1_ANIMAL1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NS_TYPE_BJS_V1_ANIMAL1_SKELETON, nsBjsV1Animal1SkeletonClass))
#define NS_IS_BJS_V1_ANIMAL1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), NS_TYPE_BJS_V1_ANIMAL1_SKELETON))
#define NS_IS_BJS_V1_ANIMAL1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), NS_TYPE_BJS_V1_ANIMAL1_SKELETON))

typedef struct _nsBjsV1Animal1Skeleton nsBjsV1Animal1Skeleton;
typedef struct _nsBjsV1Animal1SkeletonClass nsBjsV1Animal1SkeletonClass;
typedef struct _nsBjsV1Animal1SkeletonPrivate nsBjsV1Animal1SkeletonPrivate;

struct _nsBjsV1Animal1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  nsBjsV1Animal1SkeletonPrivate *priv;
};

struct _nsBjsV1Animal1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ns_bjs_v1_animal1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (nsBjsV1Animal1Skeleton, g_object_unref)
#endif

nsBjsV1Animal1 *ns_bjs_v1_animal1_skeleton_new (void);


G_END_DECLS

#endif /* __AUTOGEN_H__ */
